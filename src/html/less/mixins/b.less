/*

A collection of useful mixins that are very useful when
architecturing sites and creating complex layouts.

Simply add as a class mixin to your own selectors.

Contains work from :

* html5BoilerPlate -
* 3L.Less 	- mateuszkocz.github.io/3l
* Preboot 	- github.com/mdo/preboot
* Normalize -
* Reset 	-
* Clearfix 	-
* Pure CSS 	- pure.io

As well as input from :
* Denis Leblanc - denisleblanc.com/
* - www.sitepoint.com/eight-definitive-font-stacks/
*/


// POSITIONING --------------------------------------------------

.x( @left ){	left:@left; }
.y( @top ){		top:@top; }

.w( @width ){	width:@width }
.h( @height ){	height:@height }

// Absolute positioning
.position( @top:auto; @left:auto; @bottom:auto; @right:auto )
{
	position:absolute;
	top:@top;
	left:@left;
	bottom:@bottom;
	right:@right;
}

// Position relative to the top left of the parent container
.position( @top:auto; @left:auto ){ .position-tl( @top, @left ); }
.position-tl( @top:auto; @left:auto ){	position:absolute;	top:@top;	left:@left; }
.position-tl( @position:auto ){	.position-tl( @position, @position ); }

.position-tr( @top:auto; @right:auto ){	position:absolute;	top:@top;	right:@right; }
.position-tr( @position:auto ){	.position-tr( @position, @position ); }


// Position relative to the bottom and right of the parent container
.position-br( @bottom:auto; @right:auto ){	position:absolute;	bottom:@bottom;	right:@right; }
.position-br( @position:auto ){	.position-br( @position, @position ); }

.position-bl( @bottom:auto; @left:auto ){	position:absolute;	bottom:@bottom;	left:@left; }
.position-bl( @position:auto ){	.position-bl( @position, @position ); }


// Center-align a block level element
.centralize() {  display: block; .margins-lr( auto ); }


// PADDING & MARGINS --------------------------------------------
// Margins for asymetrical layouts - Individualised
// NB. Useful for setting groups then overriding individually
.margins( @top:auto; @right:auto; @bottom:auto; @left:auto ){
	margin-top:@top;
	margin-right:@right;
	margin-bottom:@bottom;
	margin-left:@left;
}

// Margins for symetrical layouts
// Margins : top = bottom, right = left
.margins( @top:auto; @left:auto ){	margin:@top @left; }
// Margins : All 4 margins equal!
.margins( @margin:auto ){	margin:@margin; }

// Margins Top & Bottom ONLY
.margins-tb( @top:auto; @bottom:auto ){	margin-top:@top;	margin-bottom:@bottom; }
.margins-tb( @margin:auto){	.margins-tb( @margin, @margin ); }
// Margins Left & Right ONLY
.margins-lr( @left:auto, @right:auto ){	margin-left:@left;	margin-right:@right; }
.margins-lr( @margin:auto ){	.margins-lr( @margin, @margin ); }
// Margins Top & Left ONLY
.margins-tl( @top:auto, @left:auto ){	margin-top:@top; margin-left:@left; }
.margins-tl( @margin:auto ){	.margins-tl( @margin, @margin ); }

.margin-baseline(){
    margin-bottom: 0px + @line-height;  // pixel fallback
    margin-bottom: 0rem + (@line-height / @font-size-browser-default);
}


// If you know the definite widths
.centralise-element(){
	.position-tl(50%);
}

.centralise-element( @negativeMargin ){
	.centralise-element();
	.margins-tl(-50%);
}

.centralise-datum( @w; @h ){
	.margins-tl( -(@h/2) , -(@w/2) );
}
.centralise-datum( @diameter ){
	.centralise-datum( @diameter, @diameter ) ;
}



// ACCESSIBILITY ----------------------------------------------

// Hide from both screenreaders and browsers: h5bp.com/u
.hidden () { display: none !important; visibility: hidden;}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
.visuallyhidden () { border: 0;clip: rect(0 0 0 0);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}

// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: h5bp.com/p
// CAUTION! The .visuallyhidden class is included! If you want your object to be both
// .visuallyhidden and .focusabe use only .focusable class.
.focusable () { .visuallyhidden;&:active,&:focus{clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto;}}

// Hide visually and from screenreaders, but maintain layout.
.invisible () { visibility: hidden; }

// Contain floats: h5bp.com/q
.clearfix () { *zoom:1;&:before,&:after{content:" ";display:table;}&:after{clear:both;} }


// COLOURS ===========================================================================

// When clicked and dragged over text, what colours should the rectangle and text be?
.selection( @text-color ; @background-color ) {
	&::-moz-selection {color: @text-color; background-color: @background-color;}
	&::selection {color: @text-color; background-color: @background-color;}
}

// Placeholder text
// Set the placeholder text color for inputs
.placeholder(@color: @input-color-placeholder) {
  &:-moz-placeholder            { color: @color; } // Firefox 4-18
  &::-moz-placeholder           { color: @color; } // Firefox 19+
  &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}


// lots of shortcuts to create backgrounds!
// colour / image / repetitions / position / scale
.background(@color){
	background-color:@color;
}



.background( @color; @image; @xposition; @yposition; @xrepotitions; @yrepositions; @xscale; @yscale ){

	.background-size ( @xscale, @yscale );
}

.border( @color; @size; @style:solid ){
	border: @color @size @style;

}

// a shortcut to a filter!
// 3px 3px 0 0 rgba(0, 128, 0, 0.3)
.glow( @xoffset:2px, @yoffset:2px, @blur:4px, @spread:4px, @colour:white ){
	-webkit-box-shadow: @xoffset @yoffset @blur @spread @colour;
    -moz-box-shadow: @xoffset @yoffset @blur @spread @colour;
    box-shadow: @xoffset @yoffset @blur @spread @colour;
}

// IMAGES =======================================================
// Polyfiller for mozilla: use until redundant
.background-size (...) {	-moz-background-size: @arguments;	background-size: @arguments; }

// Clip an image into a frame
.background-clip( @clip:padding-box ) {  -moz-background-clip: @clip;  -webkit-background-clip: @clip;  background-clip: @clip; }

// Image replacement.
.ir () {border: 0; overflow: hidden; background-color: transparent; *text-indent: -9999px; &:before {content: ""; display: block; width: 0; height: 100%;}}



// http://markdotto.com/playground/3d-text/
.3D-text(@color,@depth) {
    color:@color;
    text-shadow:
    0 (@depth*0.01em) 0 lighten(@color,3.3%),
    0 (@depth*0.02em) (@depth*0.01em) darken(@color,10%),
    0 (@depth*0.03em) (@depth*0.02em) darken(@color,11%),
    0 (@depth*0.04em) (@depth*0.02em) darken(@color,13%),
    0 (@depth*0.06em) (@depth*0.01em) darken(@color,16%),
    0 (@depth*0.06em) (@depth*0.03em) rgba(0,0,0,.5),
    0 0 (@depth*0.05em) rgba(0,0,0,.2),
    0 (@depth*0.02em) (@depth*0.08em) rgba(0,0,0,.3),
    0 (@depth*0.1em) (@depth*0.12em) rgba(0,0,0,.25),
    0 (@depth*0.2em) (@depth*0.20em) rgba(0,0,0,.15);
}
// UTILS ========================================================



.button() {
    display: inline-block;
    *display: inline;
    zoom: 1;
    line-height: normal;
    white-space: nowrap;
    vertical-align: baseline;
    text-align: center;
    cursor: pointer;

    -webkit-user-drag: none;
	.user-selectable( none );

	font-size: 100%;
	// stupid ie
    *font-size: 90%;
    *overflow: visible;
    text-decoration: none;
    -webkit-font-smoothing: antialiased;

	// stupid firefox
	&::-moz-focus-inner {
		padding: 0;
		border: 0
	}

	&:hover{
		text-decoration: none;
	}

	&:focus{
		text-decoration: none;
		outline: 0
	}

	&:active{

	}
}

.disabled() {
    border: 0;
    cursor: not-allowed;
}
